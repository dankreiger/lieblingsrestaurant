// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddressTypeSelect rendering renders as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AddressTypeSelect />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <Input
        id="addressTypeFilter"
        name="addressTypeFilter"
        onChange={[Function]}
        type="select"
      >
        <option
          value="establishments"
        >
          Establishments
        </option>
        <option
          value=""
        >
          All Addresses
        </option>
      </Input>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <option
            value="establishments"
          >
            Establishments
          </option>,
          <option
            value=""
          >
            All Addresses
          </option>,
        ],
        "id": "addressTypeFilter",
        "name": "addressTypeFilter",
        "onChange": [Function],
        "type": "select",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Establishments",
            "value": "establishments",
          },
          "ref": null,
          "rendered": "Establishments",
          "type": "option",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "All Addresses",
            "value": "",
          },
          "ref": null,
          "rendered": "All Addresses",
          "type": "option",
        },
      ],
      "type": [Function],
    },
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": undefined,
      "componentStyle": ComponentStyle {
        "componentId": "sc-bwzfXH",
        "isStatic": true,
        "rules": Array [
          "
  margin-bottom: 0 !important;
  height: 100%;
  select {
    height: 100%;
    box-shadow: ",
          "1px 1px 3px #333",
          ";
    transition: box-shadow ",
          "250",
          "ms
    &:focus {
      box-shadow: ",
          "0px 0px 1px #333",
          "
    }
  }
",
        ],
      },
      "displayName": "Styled(FormGroup)",
      "render": [Function],
      "styledComponentId": "sc-bwzfXH",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
      Symbol(Symbol.hasInstance): [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Input
          id="addressTypeFilter"
          name="addressTypeFilter"
          onChange={[Function]}
          type="select"
        >
          <option
            value="establishments"
          >
            Establishments
          </option>
          <option
            value=""
          >
            All Addresses
          </option>
        </Input>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <option
              value="establishments"
            >
              Establishments
            </option>,
            <option
              value=""
            >
              All Addresses
            </option>,
          ],
          "id": "addressTypeFilter",
          "name": "addressTypeFilter",
          "onChange": [Function],
          "type": "select",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Establishments",
              "value": "establishments",
            },
            "ref": null,
            "rendered": "Establishments",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "All Addresses",
              "value": "",
            },
            "ref": null,
            "rendered": "All Addresses",
            "type": "option",
          },
        ],
        "type": [Function],
      },
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": undefined,
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": true,
          "rules": Array [
            "
  margin-bottom: 0 !important;
  height: 100%;
  select {
    height: 100%;
    box-shadow: ",
            "1px 1px 3px #333",
            ";
    transition: box-shadow ",
            "250",
            "ms
    &:focus {
      box-shadow: ",
            "0px 0px 1px #333",
            "
    }
  }
",
          ],
        },
        "displayName": "Styled(FormGroup)",
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
